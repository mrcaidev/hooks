---
import type { MarkdownHeading } from "astro";
import Anchor from "./anchor.astro";

export type Props = {
  anchors: MarkdownHeading[];
};
const { anchors } = Astro.props;
---

<aside class="fixed top-0 bottom-0 right-5 hidden xl:block w-72 pt-20">
  <div
    class="px-6 pt-1 pb-2 font-bold shadow-[inset_1px_0] shadow-gray-6 dark:shadow-graydark-6"
  >
    On this page
  </div>
  <nav
    aria-label="On this page"
    id="on-this-page"
    class="space-y-1 relative max-h-full px-5 pb-1 overflow-auto overscroll-contain shadow-[inset_1px_0] shadow-gray-6 dark:shadow-graydark-6"
  >
    <span
      id="anchor-indicator"
      class="absolute w-px h-7 top-0 left-0 bg-cyan-9 dark:bg-cyandark-9 transition-transform"
    ></span>
    {anchors.map((anchor) => <Anchor {...anchor} />)}
  </nav>
</aside>

<script>
  const headings = document.querySelectorAll("article :is(h1,h2)");
  const anchors = Array.from(
    document.querySelectorAll("#on-this-page a")
  ) as HTMLAnchorElement[];
  const indicator = document.getElementById("anchor-indicator");

  let activeAnchor: HTMLAnchorElement | undefined = undefined;

  function activateAnchor(anchor: HTMLAnchorElement | undefined) {
    if (!anchor) {
      return;
    }

    activeAnchor?.classList.remove("text-gray-12", "dark:text-graydark-12");
    activeAnchor?.classList.add("text-gray-11", "dark:text-graydark-11");

    activeAnchor = anchor;
    anchor.classList.remove("text-gray-11", "dark:text-graydark-11");
    anchor.classList.add("text-gray-12", "dark:text-graydark-12");

    if (!indicator) {
      return;
    }
    indicator.style.transform = `translateY(${anchor.offsetTop}px)`;
  }

  function isAtBottom() {
    return (
      window.innerHeight + window.scrollY >= document.body.offsetHeight + 120
    );
  }

  function findActiveIndex() {
    if (isAtBottom()) {
      return anchors.length - 1;
    }

    const BOUNDARY_TOP_PIXELS = 100;

    for (const [index, heading] of headings.entries()) {
      if (heading.getBoundingClientRect().top < BOUNDARY_TOP_PIXELS) {
        continue;
      }
      return Math.max(0, index - 1);
    }

    return anchors.length - 1;
  }

  function updateActiveAnchor() {
    const activeIndex = findActiveIndex();
    activateAnchor(anchors[activeIndex]);
  }

  if (window.location.hash) {
    const targetAnchor = anchors.find(
      (anchor) => anchor.hash === window.location.hash
    );
    activateAnchor(targetAnchor);
  } else {
    updateActiveAnchor();
  }

  window.addEventListener("scroll", updateActiveAnchor);
</script>
